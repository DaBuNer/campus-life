<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dbn.campuslife.mapper.LifeMessageMapper">


    <insert id="addLifeMessage">
        INSERT INTO LIFE_INFO(USER_ID, MESSAGE_INFO, POWER)
        VALUES (#{userId}, #{messageInfo}, #{power})
    </insert>

    <resultMap id="LifeMessage" type="com.dbn.campuslife.entity.message.LifeMessagePO">
        <result property="id" column="ID"/>
        <result property="messageInfo" column="MESSAGE_INFO"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="personName" column="PERSON_NAME"/>
        <result property="headImage" column="HEAD_IMAGE"/>
        <result property="userId" column="USER_ID"/>
        <result property="likeNum" column="LIKE_NUM"/>
        <result property="likeThis" column="LIKE_THIS"/>
        <result property="commentNum" column="COMMENT_NUM"/>
    </resultMap>

    <sql id="listLifeMessageCondition">
        <if test="type == 'PUBLIC'">
            POWER = 1
            OR L.USER_ID = #{userId}
            OR POWER = 2 AND EXISTS (SELECT 1 FROM USER_ATTENTION WHERE L.USER_ID = ATTENTION_USER_ID AND
            USER_ID = #{userId})
        </if>
        <if test="type == 'GET_BY_ID'">
            AND L.ID = #{id}
        </if>
        <if test="messageInfo != null">
            AND MESSAGE_INFO LIKE CONCAT('%', #{messageInfo}, '%')
        </if>
        <if test="type == 'USER'">
            AND (POWER = 1 OR POWER = 2 AND EXISTS (SELECT 1 FROM USER_ATTENTION WHERE L.USER_ID = ATTENTION_USER_ID AND
            USER_ID = #{userId}) OR (POWER = 3 OR POWER = 2) AND #{userId} = #{targetUserId}) AND USER_ID =
            #{targetUserId}
        </if>
    </sql>

    <select id="listLifeMessage" resultMap="LifeMessage">
        SELECT *
        FROM (SELECT L.ID,
        L.MESSAGE_INFO,
        L.CREATE_TIME,
        U.PERSON_NAME,
        U.HEAD_IMAGE,
        L.USER_ID,
        (SELECT COUNT(*) FROM GIVE_LIKE WHERE L.ID = LIKE_ID AND LIKE_TYPE = '0') LIKE_NUM,
        (SELECT COUNT(*) FROM GIVE_LIKE WHERE L.ID = LIKE_ID AND USER_ID = #{userId} AND LIKE_TYPE = '0') LIKE_THIS,
        (SELECT COUNT(*) FROM LIFE_INFO_COMMENT WHERE L.ID = LIFE_MESSAGE_ID) COMMENT_NUM,
        ROW_NUMBER() OVER(ORDER BY
        <choose>
            <when test="type == 'PUBLIC'">
                L.CREATE_TIME DESC
            </when>
            <otherwise>
                L.CREATE_TIME DESC
            </otherwise>
        </choose>
        ) R
        FROM LIFE_INFO L
        LEFT JOIN USER U ON L.USER_ID = U.ID
        <where>
            <include refid="listLifeMessageCondition"/>
        </where>
        ) S
        <choose>
            <when test="type == 'GET_BY_ID'">

            </when>
            <otherwise>
                WHERE S.R BETWEEN #{startIndex} AND #{endIndex}
            </otherwise>
        </choose>
    </select>

    <select id="countLifeMessage" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM LIFE_INFO L
        LEFT JOIN USER U ON L.USER_ID = U.ID
        <where>
            <include refid="listLifeMessageCondition"/>
        </where>
    </select>

    <delete id="deleteLifeMessageById">
        DELETE
        FROM LIFE_INFO
        WHERE ID = #{id}
    </delete>

    <insert id="giveLike">
        INSERT INTO GIVE_LIKE(USER_ID, LIKE_ID, LIKE_TYPE)
        SELECT #{userId}
             , #{lifeMessageId}
             , '0' WHERE NOT EXISTS
             (SELECT * FROM GIVE_LIKE G WHERE USER_ID = #{userId} AND LIKE_ID = #{lifeMessageId} AND LIKE_TYPE = '0')
    </insert>

    <delete id="deleteLike">
        DELETE
        FROM GIVE_LIKE G
        WHERE USER_ID = #{userId}
          AND LIKE_ID = #{lifeMessageId}
          AND LIKE_TYPE = '0'
    </delete>


</mapper>